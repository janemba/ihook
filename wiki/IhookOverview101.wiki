#sidebar TableofContents
<wiki:toc max_depth="1" />
= Introduction =

Here is a detailed overview of ihook version 1.0.1 in action. All the example was compiled with mingw32-g++/mingw32-gcc also, Code::Blocks IDE was used.


= Using ihook static library for DLL injection =

In this example two hook type is used :
 # Hook on a Windows API function : _httpOpenRequestA_ from _wininet.dll_ 
 # Hook on a function code : function inside the DLL

The DLL is generated by Code::Blocks and I compiled it with ihook static library. Next, I used *RemoteDLL* tool to inject it inside Internet Explorer process.

=== `main.cpp` ===
{{{
#include <stdio.h>
#include <wininet.h>

#include "main.h"
#define IHOOK_CALL_STDCALL
#include "hookit.h"


typedef HINTERNET (WINAPI *h_OpenReq) (HINTERNET, LPCTSTR, LPCTSTR, LPCTSTR,
                                       LPCTSTR, LPCTSTR, DWORD, DWORD_PTR);
typedef int (*h_not) (const char*);

static void writeToLog(const char *msg)
{
    HANDLE hFile;
    DWORD dwBytesWritten = 0;

    hFile = CreateFile("C:\\test_log.txt",
                       FILE_APPEND_DATA,
                       FILE_SHARE_READ,
                       NULL,
                       OPEN_ALWAYS,
                       FILE_ATTRIBUTE_NORMAL,
                       NULL);

    if (hFile == INVALID_HANDLE_VALUE)
        MessageBoxA(NULL, "CreateFile", "ERROR", MB_OK);
    else {
           WriteFile(hFile, msg, strlen(msg), &dwBytesWritten, NULL);
           CloseHandle(hFile);
    }
}

HINTERNET WINAPI hook_OpenRequest(HINTERNET hConnect,
                                  LPCTSTR verb,
                                  LPCTSTR objectName,
                                  LPCTSTR version,
                                  LPCTSTR referer,
                                  LPCTSTR acceptTypes,
                                  DWORD dwFlags,
                                  DWORD_PTR dwContext)
{
    h_OpenReq   fct;
    DWORD       addr;


    writeToLog((const char*) objectName);

    addr = getReturnAddressByName((char*)"HttpOpenRequestA", (char*)"wininet.dll");
    fct  = (h_OpenReq) addr;

    return (fct(hConnect, verb, objectName, version, referer, acceptTypes, dwFlags, dwContext));
}

static int  nothing(const char *msg)
{
    MessageBoxA(NULL, msg, "I'm in nothing function", MB_OK);
    return (0);
}

static int  hook_nothing(const char *msg)
{
    DWORD addr;
    h_not fct;

    MessageBoxA(NULL, msg, "HOOKED", MB_OK);

    addr = getReturnAddressByAddr((DWORD) &nothing);
    fct  = (h_not) addr;

    return (fct(msg));
}



extern "C" DLL_EXPORT BOOL APIENTRY DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    switch (fdwReason)
    {
        case DLL_PROCESS_ATTACH:
            hookitByAddress((DWORD) &nothing, (DWORD) &hook_nothing);
            hookitByName((char*)"HttpOpenRequestA", (char*)"wininet.dll", (DWORD) hook_OpenRequest);

            nothing("hook function code");

            break;

        case DLL_PROCESS_DETACH:
            unhookByName((char *) "HttpOpenRequestA", (char*) "wininet.dll");
            unhookByAddress((DWORD) &nothing);
            break;
    }
    return TRUE;
}

}}}
----
=== `main.h` ===
{{{
#ifndef __MAIN_H__
#define __MAIN_H__

#include <windows.h>

/*  To use this exported function of dll, include this header
 *  in your project.
 */

#ifdef BUILD_DLL
    #define DLL_EXPORT __declspec(dllexport)
#else
    #define DLL_EXPORT __declspec(dllimport)
#endif

#endif
}}}
----

=== compilation ===
{{{
mingw32-g++-4.7.2.exe  -O2 -Wall -DBUILD_DLL -DIHOOK_ENGINE_LIB -c main.cpp -o obj\Release\main.o
mingw32-gcc-4.7.2.exe -shared -Wl,--output-def=bin\Release\libihook_test_dll.def -Wl,--out-implib=bin\Release\libihook_test_dll.a -Wl,--dll  obj\Release\main.o   -o bin\Release\ihook_test_dll.dll -s  -luser32 lib\libihook.lib
}}}
----

Next *RemoteDLL* was used to inject the DLL inside *IEXPLORE.exe* process.

[http://ihook.googlecode.com/svn/wiki/ihook_static.png]