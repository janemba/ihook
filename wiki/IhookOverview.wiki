#labels Phase-Implementation
#sidebar TableofContents
<wiki:toc max_depth="1" />
= Introduction =

Here is a detailed overview of ihook in action. All the example was compiled with mingw32-g++/mingw32-gcc also, Code::Blocks IDE was used.


= Using ihook static library for DLL injection =

In this example we simply hooked _recv_ function from _ws2_32.dll_ API. The DLL is generated by Code::Blocks and I compiled it with ihook static library. Next, I used *RemoteDLL* tool to inject it inside Internet Explorer process.

=== `main.cpp` ===
{{{
#include "main.h"

#define IHOOK_CALL_STDCALL
#include "hookit.h"

typedef int (WINAPI *h_recv) (SOCKET, const char*, int, int);

int WINAPI hook_recv(SOCKET s, const char *buf, int len, int flags)
{
    h_recv  fct;
    DWORD   addr;

    MessageBoxA(NULL, buf, "hooked !", MB_OK);

    addr = getReturnAddressByName((char*)"recv", (char*)"ws2_32.dll");
    fct = (h_recv)addr;

    return (fct(s, buf, len, flags));
}

extern "C" DLL_EXPORT BOOL APIENTRY DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    DWORD   id = 0;

    switch (fdwReason)
    {
        case DLL_PROCESS_ATTACH:
            id = hookit((char*)"recv", (char*)"ws2_32.dll", (DWORD) hook_recv);
            if (id <= 0) {
                MessageBoxA(NULL, "Something goes wrong, check returned value", "test", MB_OK);
                return -1;
            }
            break;

        case DLL_PROCESS_DETACH:
            unhookById(id); // or unhookByName("recv", "ws2_32.dll");
            break;
    }
    return TRUE;
}
}}}
----
=== `main.h` ===
{{{
#ifndef __MAIN_H__
#define __MAIN_H__

#include <windows.h>

/*  To use this exported function of dll, include this header
 *  in your project.
 */

#ifdef BUILD_DLL
    #define DLL_EXPORT __declspec(dllexport)
#else
    #define DLL_EXPORT __declspec(dllimport)
#endif

#endif // __MAIN_H__
}}}
----

=== compilation ===
{{{
mingw32-g++-4.7.2.exe -O2  -Wall -DBUILD_DLL -DIHOOK_ENGINE_LIB -c main.cpp -o obj\Release\main.o
mingw32-g++-4.7.2.exe -shared -o ihook_test.dll  obj\\Release\\main.o -s -luser32 libihook.lib
}}}
----

Next *RemoteDLL* was used to inject the DLL inside *IEXPLORE.exe* process.

[http://ihook.googlecode.com/svn/wiki/ihook_static.png]



= Using ihook shared library for a basic application =

In this example we simply hooked _recv_ function from _ws2_32.dll_ API. For this, a basic client sending an HTTP request is used (stolen from msdn).

=== `client.c` ===
{{{
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif // WIN32_LEAN_AND_MEAN

#define _WIN32_WINNT 0x0501

#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <winsock2.h>
#include <ws2tcpip.h>

#include "hookit.h"

int WINAPI Myrecv(SOCKET, const char*, int, int);


typedef int (WINAPI* h_recv) (SOCKET, const char*, int , int);

int WINAPI hook_recv(SOCKET s, const char *buf, int len, int flags)
{
    h_recv  fct;
    DWORD   addr;

    MessageBoxA(NULL, buf, "hooked !", MB_OK);

    addr = getReturnAddressByName("recv", "ws2_32.dll");
    fct  = (h_recv)addr;

    return (fct(s, buf, len, flags));
}



int         main(void)
{
    DWORD   ret;
    int     init;
    WSADATA wsaData;
    SOCKET  ConnectSocket = INVALID_SOCKET;
    struct  sockaddr_in clientService;
    char    buf[2048];

    ret = hookit("recv", "ws2_32.dll", (DWORD)hook_recv);
    printf("hook set: %i\n", (int)ret);

    init = WSAStartup(MAKEWORD(2,2), &wsaData);
    if (init != 0)
    {
        printf("init failed\n");
        return (1);
    }

    ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (ConnectSocket == INVALID_SOCKET) {
        printf("socket() failed: %i\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }

    clientService.sin_family = AF_INET;
    clientService.sin_addr.s_addr = inet_addr("173.194.34.6");  // google.com
    clientService.sin_port = htons(80);

    ret = connect(ConnectSocket,  (SOCKADDR*) &clientService, sizeof(clientService) );
    if ((int)ret == SOCKET_ERROR) {
        closesocket(ConnectSocket);
    }

    if ((int) ret == SOCKET_ERROR) {
        printf("Unable to connect to the server !");
        WSACleanup();
        return 1;
    }

    strcpy(buf, "GET / HTTP/1.0\r\n");
    ret = send(ConnectSocket, buf, (int) strlen(buf), 0);
    if ((int)ret == SOCKET_ERROR) {
        printf("send() failed: %i\n",  WSAGetLastError());
        closesocket(ConnectSocket);
        WSACleanup();
        return 1;
    }
    shutdown(ConnectSocket, SD_SEND);

    printf("Bytes sent: %i\n", (int)ret);
    printf("Type a key...\n");
    getchar();

    do
    {
        ret = recv(ConnectSocket, buf, 2048, 0);
        if (ret > 0) {
            printf("Data received: %ld bytes\n", ret);
        }
        else if (ret == 0)
            printf("Connection closed\n");
        else
            printf("recv failed: %i\n", WSAGetLastError());
    } while (ret > 0);


    return 0;
}
}}}
----

=== compilation ===
{{{
mingw32-gcc -O2 -Wall -DIHOOK_ENGINE_DLL -c client.c -o obj\\Release\\client.o
mingw32-gcc -o ihook_shared.exe obj\\Release\\client.o -lws2_32 -s libihook.dll
}}}
----

[http://ihook.googlecode.com/svn/wiki/ihook_shared.png]