#ihook overview

= Introduction =

Here is a detailed overview of ihook in action. All the example was compiled with mingw32-g++ also, Code::Blocks IDE was used.


= Using ihook static libray for DLL injection =

`main.cpp`
{{{
#include "main.h"

#define IHOOK_CALL_STDCALL
#include "hookit.h"

typedef int (WINAPI *h_recv) (SOCKET, const char*, int, int);

int WINAPI hook_recv(SOCKET s, const char *buf, int len, int flags)
{
    h_recv  fct;
    DWORD   addr;

    MessageBoxA(NULL, buf, "hooked !", MB_OK);

    addr = getReturnAddressByName((char*)"recv", (char*)"ws2_32.dll");
    fct = (h_recv)addr;

    return (fct(s, buf, len, flags));
}

extern "C" DLL_EXPORT BOOL APIENTRY DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    DWORD   id = 0;

    switch (fdwReason)
    {
        case DLL_PROCESS_ATTACH:
            id = hookit((char*)"recv", (char*)"ws2_32.dll", (DWORD) hook_recv);
            if (id <= 0) {
                MessageBoxA(NULL, "Something goes wrong, check returned value", "test", MB_OK);
                return -1;
            }
            break;

        case DLL_PROCESS_DETACH:
            unhookById(id); // or unhookByName("recv", "ws2_32.dll");
            break;
    }
    return TRUE;
}
}}}

`main.h`
{{{
#ifndef __MAIN_H__
#define __MAIN_H__

#include <windows.h>

/*  To use this exported function of dll, include this header
 *  in your project.
 */

#ifdef BUILD_DLL
    #define DLL_EXPORT __declspec(dllexport)
#else
    #define DLL_EXPORT __declspec(dllimport)
#endif

#endif // __MAIN_H__
}}}


compilation
{{{
mingw32-g++-4.7.2.exe -O2  -Wall -DBUILD_DLL -DIHOOK_ENGINE_LIB -c main.cpp -o obj\Release\main.o
mingw32-g++-4.7.2.exe -shared -o ihook_test.dll  obj\\Release\\main.o -s -luser32 libihook.lib
}}}

Next I used *RemoteDLL* to inject the DLL inside *IEXPLORE.exe* process.